name: Frida Gadget Injector (Safer Embed + Official Signer)

on:
  push:
    branches:
      - main

jobs:
  patch-apk:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Java and Python
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install Dependencies
        shell: bash
        run: |
          set -euo pipefail
          pip install frida-gadget
          sudo apt-get update
          sudo apt-get install -y default-jdk wget unzip
          wget https://github.com/iBotPeaches/Apktool/releases/download/v2.12.0/apktool_2.12.0.jar -O apktool.jar
          sudo mv apktool.jar /usr/local/bin/apktool.jar
          printf '#!/bin/bash\njava -jar /usr/local/bin/apktool.jar "$@"\n' | sudo tee /usr/local/bin/apktool >/dev/null
          sudo chmod +x /usr/local/bin/apktool

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Create Debug Keystore
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p ~/.android/
          keytool -genkeypair -v -keystore ~/.android/debug.keystore \
            -alias androiddebugkey -storepass android -keypass android \
            -dname "CN=Android Debug,O=Android,C=US" \
            -keyalg RSA -keysize 2048 -validity 10000

      - name: Download APK from URL
        shell: bash
        run: |
          set -euo pipefail
          APK_URL="https://github.com/kaifcodec/Upload_apk/releases/download/v1.1.6/instagram.apk"
          curl -L -o original.apk "$APK_URL"

      - name: Decode APK
        shell: bash
        run: |
          set -euo pipefail
          rm -rf original
          apktool d -f -o original original.apk

      - name: Ensure INTERNET permission and extractNativeLibs
        shell: bash
        run: |
          set -euo pipefail
          MANIFEST="original/AndroidManifest.xml"
          # Add INTERNET if missing
          if ! grep -q 'android.permission.INTERNET' "$MANIFEST"; then
            # Insert right after <manifest ...>
            sed -i '0,/<manifest/ s//&\n    <uses-permission android:name="android.permission.INTERNET"\/>/' "$MANIFEST"
          fi
          # Force extractNativeLibs=true
          if grep -q 'android:extractNativeLibs=' "$MANIFEST"; then
            sed -i 's/android:extractNativeLibs="false"/android:extractNativeLibs="true"/' "$MANIFEST"
          else
            sed -i 's/<application /<application android:extractNativeLibs="true" /' "$MANIFEST"
          fi

      - name: Embed Frida Gadget (renamed) and config (Script mode)
        shell: bash
        run: |
          set -euo pipefail
          ABI_DIR="original/lib/arm64-v8a"
          mkdir -p "$ABI_DIR"

          # Dump gadget binaries and copy arm64 to a neutral name
          frida-gadget --dump --arch arm64 --output gadget-out
          GADGET_SO="$(find gadget-out -type f -name '*arm64*.so' | head -n 1)"
          if [ -z "${GADGET_SO:-}" ]; then
            echo "Could not find arm64 gadget .so"; exit 1
          fi
          cp "$GADGET_SO" "$ABI_DIR/libigloader.so"

          # JS payload as fake .so (Script interaction reads this)
          cat > "$ABI_DIR/libpayload.js.so" <<'EOF'
console.log('[gadget] payload loaded');
EOF

          # Android-style config next to the library; name must match libigloader.so
          cat > "$ABI_DIR/libigloader.config.so" <<'JSON'
{
  "interaction": {
    "type": "script",
    "path": "libpayload.js.so",
    "on_change": "ignore"
  },
  "runtime": { "spawn": "main" }
}
JSON

      - name: Load Gadget early via smali in Application.attachBaseContext
        shell: bash
        run: |
          set -euo pipefail
          # Try to find Application.attachBaseContext; fallback to first Activity onCreate
          APP_SMALI="$(grep -Rl --include '*.smali' 'Landroid/app/Application;->attachBaseContext' original/smali* | head -n 1 || true)"
          if [ -z "$APP_SMALI" ]; then
            echo "No Application.attachBaseContext found; trying Activity.onCreate"
            APP_SMALI="$(grep -Rl --include '*.smali' 'Landroid/app/Activity;->onCreate' original/smali* | head -n 1 || true)"
          fi
          if [ -z "$APP_SMALI" ]; then
            echo "Could not find an injection point automatically"; exit 1
          fi
          echo "Injecting into: $APP_SMALI"

          TMPF="$APP_SMALI.tmp"
          INJECTED=0
          while IFS= read -r line; do
            printf '%s\n' "$line" >> "$TMPF"
            # Inject once after first .prologue or invoke-super
            if [ $INJECTED -eq 0 ] && printf '%s' "$line" | grep -Eq '^\s*\.prologue|^\s*invoke-super'; then
              cat >> "$TMPF" <<'SMALI'
    const-string v0, "igloader"
    invoke-static {v0}, Ljava/lang/System;->loadLibrary(Ljava/lang/String;)V
SMALI
              INJECTED=1
            fi
          done < "$APP_SMALI"
          mv "$TMPF" "$APP_SMALI"

      - name: Rebuild APK
        shell: bash
        run: |
          set -euo pipefail
          apktool b -f -o rebuilt.apk original

      - name: Align and Sign APK
        shell: bash
        run: |
          set -euo pipefail
          BUILD_TOOLS_PATH="${ANDROID_HOME}/build-tools/34.0.0"
          "${BUILD_TOOLS_PATH}/zipalign" -f -v 4 rebuilt.apk rebuilt-aligned.apk
          "${BUILD_TOOLS_PATH}/apksigner" sign --ks "${HOME}/.android/debug.keystore" \
            --ks-pass pass:android --key-pass pass:android \
            --v1-signing-enabled true --v2-signing-enabled true --v3-signing-enabled true \
            rebuilt-aligned.apk
          "${BUILD_TOOLS_PATH}/apksigner" verify --verbose --print-certs rebuilt-aligned.apk

      - name: Upload Patched APK
        uses: actions/upload-artifact@v4
        with:
          name: frida-gadget-script-signed-apk
          path: rebuilt-aligned.apk
